"use strict";const e=require("fire-path"),t=require("fire-fs"),r=require("./meta/raw-asset");let a={RawAssetMeta:r,AssetMeta:require("./meta/asset"),FolderMeta:require("./meta/folder"),defaultMetaType:r,create(r,n,i,u){if(!u&&".meta"!==e.extname(n))return r.error("Invalid metapath %s, must use .meta as suffix",n),null;if(!u&&!i)try{i=(u=t.readJsonSync(n)).uuid}catch(e){i=null}let s=a.findCtor(r,r._metaToAssetPath(n),u);if(!s)return null;let l=new s(r);return i&&(l.uuid=i),l},createSubMeta(e,t,r){if("function"!=typeof t)return e.error("Invalid constructor for sub meta"),null;let a=new t(e);return r&&(a.uuid=r),a},findCtor(r,n,i){let u=e.extname(n);if(".meta"===u)return r.error("Invalid assetpath, must not use .meta as suffix"),null;let s=t.existsSync(n);if(!u&&!1===s)return a.FolderMeta;u=u.toLowerCase();let l=t.isDirSync(n),o=r._extname2infos[u];if(o)for(let e=0;e<o.length;++e){let t=o[e];if(l&&!t.folder||!l&&t.folder)continue;let r=t.ctor;if(!r.validate)return r;if(s){if(i&&i.importer===r.defaultType())return r;try{if(r.validate(n))return r}catch(e){}}}return l?a.FolderMeta:a.defaultMetaType},register:(e,t,r,n)=>(t=t.toLowerCase(),n===a.RawAssetMeta||function(e,t){if(e&&t){let r=Object.getPrototypeOf(e.prototype);for(;r;){if((e=r.constructor)===t)return!0;r=Object.getPrototypeOf(e.prototype)}}return!1}(n,a.RawAssetMeta)?"string"!=typeof t||"."!==t[0]?(e.warn('Invalid extname %s, must be string and must in the format ".foo"',t),void 0):(e._extname2infos[t]||(e._extname2infos[t]=[]),e._extname2infos[t].unshift({folder:r,ctor:n}),void 0):(e.warn("Failed to register meta to %s, the metaCtor is not extended from RawAssetMeta",t),void 0)),unregister(e,t){for(let r in e._extname2infos)e._extname2infos[r].ctor===t&&delete e._extname2infos[r]},reset(e){e._extname2infos=Object.create(null)},isInvalid:(e,t,r)=>t.uuid!==r.uuid,get:(e,t)=>e._uuid2meta[t],_loadSubMeta(t,r,n,i){let u=a.load(t,n,i);if(!u)return null;let s=u.getSubMetas();return s&&s[e.basenameNoExt(r)]||null},load(r,n,i){if(!i&&".meta"!==e.extname(n))return r.error("Invalid metapath, must use .meta as suffix"),null;if(r.isSubAssetByPath(n))try{const a=e.dirname(n)+".meta";return this._loadSubMeta(r,n,a,t.readJsonSync(a))}catch(e){return null}if(!i){if(!t.existsSync(n))return null;try{i=t.readJsonSync(n)}catch(e){return r.failed("Failed to load meta %s, message: %s",n,e.message),null}}let u=a.create(r,n,i.uuid,i);if(!u)return null;if(a.isInvalid(r,u,i))return null;u.deserialize(i),r._uuid2meta[u.uuid]=u;let s=u.getSubMetas();if(s)for(let e in s){let t=s[e];r._uuid2meta[t.uuid]=t}return u},save(r,a,n){if(".meta"!==e.extname(a))return r.error("Invalid metapath, must use .meta as suffix"),null;let i=n.serialize();

//Internal writting is not alowed inside AppImage, so ignore the default-assets's init
if(a.indexOf("default-assets")==-1){
    t.writeFileSync(a,JSON.stringify(i,null,2));
}


r._uuid2meta[n.uuid]=n;let u=n.getSubMetas();if(u)for(let e in u){let t=u[e];r._uuid2meta[t.uuid]=t}}};module.exports=a;
